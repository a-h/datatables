// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.754
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"encoding/json"
	"fmt"
	"net/http"
)

func page() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html><head><title>Page</title><script src=\"/dist/index.js\"></script><link rel=\"stylesheet\" href=\"https://cdn.datatables.net/2.1.3/css/dataTables.dataTables.min.css\"></head><body><table id=\"table123\"></table><script>\n\t\t\t\tindex.initializeDataTable(\"#table123\");\n      </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func main() {
	http.Handle("/dist/", http.StripPrefix("/dist/", http.FileServer(http.Dir("dist"))))
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		templ.Handler(page()).ServeHTTP(w, r)
	})
	http.HandleFunc("/data", func(w http.ResponseWriter, r *http.Request) {
		data, err := getData()
		if err != nil {
			//TODO: Log the error.
			http.Error(w, "failed to get data", http.StatusInternalServerError)
		}
		resp := DataTablesResponse{
			Draw:            1,
			RecordsTotal:    len(data),
			RecordsFiltered: len(data),
			Data:            data,
		}
		json.NewEncoder(w).Encode(resp)
	})
	fmt.Println("Listening on localhost:8080")
	http.ListenAndServe("localhost:8080", nil)
}

func getData() (data []Row, err error) {
	data = []Row{
		{
			RowID:     "row_1",
			RowData:   RowData{PKey: 1},
			Name:      "Tiger Nixon",
			Position:  "System Architect",
			Office:    "Edinburgh",
			Extn:      "5421",
			StartDate: "2011-04-25",
			Salary:    "$320,800",
		},
		{
			RowID:     "row_2",
			RowData:   RowData{PKey: 2},
			Name:      "Garrett Winters",
			Position:  "Accountant",
			Office:    "Tokyo",
			Extn:      "8422",
			StartDate: "2011-07-25",
			Salary:    "$170,750",
		},
	}
	return data, nil
}

type DataTablesResponse struct {
	Draw            int   `json:"draw"`
	RecordsTotal    int   `json:"recordsTotal"`
	RecordsFiltered int   `json:"recordsFiltered"`
	Data            []Row `json:"data"`
}

type RowData struct {
	PKey int `json:"pkey"`
}

type Row struct {
	RowID     string  `json:"DT_RowId"`
	RowData   RowData `json:"DT_RowData"`
	Name      string  `json:"name"`
	Position  string  `json:"position"`
	Office    string  `json:"office"`
	Extn      string  `json:"extn"`
	StartDate string  `json:"startDate"`
	Salary    string  `json:"salary"`
}

var _ = templruntime.GeneratedTemplate
